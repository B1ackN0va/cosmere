buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext.configFile = file('gradle.properties')
ext.config = parseConfig(configFile)

version = "${forge_version}-${mod_version}-b${build_number}"
group = 'net.cosmere.mod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${project.jar_name}"

// Process resources on build
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version': project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

// Include resources generated by data generators.
sourceSets {
    main.resources.srcDirs += 'src/main/generated'
}

minecraft {
    mappings channel: "${mappings_type}", version: "${mappings_version}"
    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')
    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run')
            arg "-mixin.config=cosmere.mixins.json"

            property 'forge.logging.console.level', 'debug'

            mods {
                cosmere {
                    source sourceSets.main
                }
            }
        }

        server {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                cosmere {
                    source sourceSets.main
                }
            }
        }

        data {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'cosmere', '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')


            mods {
                cosmere {
                    source sourceSets.main
                }
            }
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

mixin {
    add sourceSets.main, "cosmere.refmap.json"
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        //used for patchouli
        url "https://maven.blamejared.com/"
    }
    maven {
        //curio
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        //HWYLA
        url "https://maven.tehnut.info"
    }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "cosmere",
                "Specification-Vendor"    : "cosmere",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "cosmere",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "cosmere.mixins.json"
        ])
    }
}

processResources {
    // Exclude datagenerator .cache directory
    exclude '.cache'

    filesMatching('data/cosmere/patchouli_books/guide/book.json') {
        filter {
            it.replaceAll("buildNumber", config.build_number)
        }
    }
}

/**
 * Increments the buildnumber in your config file, and saves it
 * Note: The doFirst is important, without it the build number
 * will be incremented every time tasks are configured, i.e every
 * time gradle is run on this project.
 */
task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

def parseConfig(File config) {
    if(config.exists()){
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    } else {
        return null
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

// Prevent Mixin annotation processor from getting into IDEA's annotation processor settings
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}